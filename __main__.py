import argparse


import os


def main():

    result = {}

    #################
    # PARSE ARGUMENTS
    #################

    parser = argparse.ArgumentParser()

    choices_coverage = ["testcase", "test", "function", "statement", "branch"]

    def coverage_args_as_kwargs(l):
        """
        This is actually applied not as type argument of parser.add_argument
        as this would uselessly increase the number of choices, which would be required
        to be generated by itertools
        """
        nonlocal choices_coverage
        if "all" in l:
            d = {key: True for key in choices_coverage}
        else:
            d = {key: key in l for key in choices_coverage}
        return d

    parser.add_argument(
        "-v",
        "--verbose",
        dest="verbosity",
        type=int,
        default=2,
        help="Verbose output",
    )

    parser.add_argument(
        "-r",
        "--rehearsal",
        dest="run_rehearsal",
        action="store_true",
        help="Run rehearsal",
    )

    parser.add_argument(
        "-rcov",
        "--rehearsalcoverage",
        nargs="+",
        choices=choices_coverage + ["all"],
        default=list(),
        dest="rehearsal_coverage",
        action="store",
        help="Run rehearsal coverage",
    )

    parser.add_argument(
        "-m",
        "--metatesting",
        dest="run_metatesting",
        action="store_true",
        help="Run metatesting",
    )

    parser.add_argument(
        "-mcov",
        "--metatestingcoverage",
        nargs="+",
        choices=choices_coverage + ["all"],
        default=list(),
        dest="metatesting_coverage",
        action="store",
        help="Run metatesting coverage",
    )

    parser.add_argument(
        "--view",
        dest="restrict_view_name",
        action="store",
        default=None,
        help="Restrict to a specific view",
    )

    parser.add_argument(
        "--output",
        default=None,
        dest="output",
        action="store",
        help="Export output",
    )

    args = parser.parse_args()

    result["args"] = args.__dict__

    if args.rehearsal_coverage or args.metatesting_coverage:
        import warnings

        warnings.warn("Coverage is experimental and untested.", UserWarning)

    ####################
    # LOGGERS
    ####################

    import logging

    # TODO: ajuster avec les micro secondes
    # TODO: move in __init__ or logging

    level = logging.DEBUG

    # Format
    format_log = "[%(asctime)s.%(msecs)03d] [%(name)s] [%(levelname)s] %(message)s"
    datefmt_ = "%Y-%m-%d %H:%M:%S"
    formatter = logging.Formatter(fmt=format_log, datefmt=datefmt_)

    # Handlers
    if args.output:
        handler_full = logging.FileHandler(args.output, mode="w")
        handler_full.setFormatter(formatter)
        handler_full.setLevel(level)
    else:
        handler_full = logging.NullHandler()

    # Scenery
    logger = logging.getLogger(__package__)
    logger.addHandler(handler_full)
    logger.setLevel(level)

    # Rehearsal
    logger_rehearsal = logging.getLogger(__package__ + ".rehearsal")
    logger_rehearsal.addHandler(handler_full)
    logger_rehearsal.setLevel(level)
    logger_rehearsal.propagate = False

    # Rehearsal django
    logger_rehearsal_django = logging.getLogger(__package__ + ".rehearsal.django")
    logger_rehearsal_django.addHandler(handler_full)
    logger_rehearsal_django.setLevel(level)
    # This is a bit brutal/rough/ugly
    logger_rehearsal_django.manager.disable = logging.NOTSET
    logger_rehearsal_django.propagate = False

    logger_app = logging.getLogger("app.close_watch")  # TODO: change
    logger_app.handlers = []
    logger_app.addHandler(handler_full)
    logger_app.setLevel(level)

    #############
    # CONFIG
    #############

    # TODO: stlib, purelib
    # TODO: scenery version
    # TODO: SCENERY_ENV

    # TODO: shoudl be a load_settings function
    os.environ["SCENERY_TESTED_APP"] = "some_app"
    os.environ["SCENERY_COMMON_ITEMS"] = "rehearsal/common_items.yml"
    os.environ["SCENERY_SET_UP_INSTRUCTIONS"] = "rehearsal.set_up_instructions"

    result["config"] = {
        "stdlib": None,  # SysConfig.stdlib,
        "purelib": None,  # SysConfig.purelib,
        "src": None,  # SysConfig.src,
        "this_folder": None,  # SysConfig.this_folder,
    }

    for key, val in result["config"].items():
        logger.debug(f"`{key}` found at {val}")

    # NOTE: the imports will fail if loaded before SCENERY_ENV configuration
    from .coverage import RehearsalCoverageRunner, MetatestCoverageRunner
    from .metatest import MetaTestRunner
    from .rehearsal import RehearsalRunner

    #############
    # REHEARSAL
    #############

    # Tests
    if args.run_rehearsal:
        rehearsal = RehearsalRunner()
        result["rehearsal"] = rehearsal.run(args.verbosity)
    else:
        logger.info("Skipped rehearsal.")

    # Coverage
    if args.rehearsal_coverage:
        rehearsal_coverage = RehearsalCoverageRunner()
        args.rehearsal_coverage = coverage_args_as_kwargs(args.rehearsal_coverage)
        result["rehearsal coverage"] = rehearsal_coverage.run(**args.rehearsal_coverage)

        # Log
        for key, val in args.rehearsal_coverage.items():
            if not val:
                logger.debug(f"Skipped {key} coverage")
    else:
        logger.info("Skipped rehearsal coverage.")

    #############
    # METATESTING
    #############

    # Tests
    if args.run_metatesting:

        metatesting = MetaTestRunner()
        result["metatesting"] = metatesting.run(args.verbosity, args.restrict_view_name)
    else:
        logger.info("Skipped metatesting.")

    # Tests coverage
    if args.metatesting_coverage:
        if "test" in args.metatesting_coverage:
            msg = "Test coverage is not implemented for metatesting"
            logger.error(msg)
            raise NotImplementedError(msg)
        metatesting_coverage = MetatestCoverageRunner()
        args.metatesting_coverage = coverage_args_as_kwargs(args.metatesting_coverage)
        del args.metatesting_coverage["test"]
        result["metatesting coverage"] = metatesting_coverage.run(
            **args.metatesting_coverage
        )
    else:
        logger.info("Skipped metatesting coverage.")

    ###############
    # OUTPUT RESULT
    ###############

    # TODO : reconsider the correct Way for fucking Git

    # with open("app/tests/views/scenery.json", "w") as f:
    #     json.dump(result, f)


if __name__ == "__main__":

    import sys

    main()

    sys.exit(0)
