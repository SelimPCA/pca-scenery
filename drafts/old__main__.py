# See also for later
#     Intelligent verification
#     Linear code sequence and jump
#     Mutation testing
#     Regression testing
#     Software metric
#     Static program analysis
#     White-box testing
#     Doctest
#     Type checking
#     Factoring / design


def main():

    result = {}

    #################
    # PARSE ARGUMENTS
    #################

    import argparse

    parser = argparse.ArgumentParser()

    choices_coverage = ["testcase", "test", "function", "statement", "branch"]

    def coverage_args_as_kwargs(l):
        """
        This is actually applied not as type argument of parser.add_argument
        as this would uselessly increase the number of choices, which would be required
        to be generated by itertools
        """
        nonlocal choices_coverage
        if "all" in l:
            d = {key: True for key in choices_coverage}
        else:
            d = {key: key in l for key in choices_coverage}
        return d
